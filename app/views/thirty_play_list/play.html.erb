    <!--  youtubeのiframeが表示される場所    -->
		<div id="player_wrap">
      <div id="player"></div>
		</div>

		<div id="timer">
			あと
			<div id="num">
			  00:00	
			</div>

			<div id="run" class="buttom">
				<p>再生</p>
			</div>
			<div id="stop" class="buttom">
				<p>一時停止</p>
			</div>
			<br>
			<p class="small">※上記のタイマーはあくまでの再生終了の目安となっております。本システムでは再生時間の小数点以下を扱っていないため、またyoutubeの動画のロードが発生する可能性があるため、数十秒の誤差が発生する場合があります。</p>

		</div>
		
    <!-- railsの変数をjavascriptに渡すための処理 -->
		<%= javascript_tag do %>
			// 曲リストをjavascriptで使えるようにする
			var buf = new Array();
			<% @song_list.each do |item| %>
				buf.push('<%= item %>');
			<% end %>
			window.song_list = buf;

			// timerの初期値としてプレイリストの合計時間を入れる
			window.time = <%= @time %>;
			var min = Math.floor(window.time/60);
			var sec = Math.floor(window.time%60);
			if(sec < 10){ // > 10以下のときは０を加える
				sec = "0" +sec;
			}
			document.getElementById('num').innerHTML = (
			  min + ":" +sec 
			);
		<% end %>
		<!-- railsからjavascriptへ値を渡すため、あえてjavascriptタグのなかに直接コードを書きました-->
    <script>
      // youtubeのiframeを使うためのテンプレ
      var tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '100%',
          // videoId: '',
					playerVars:{
						'controls':2,
						'rel':0
					},
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      function onPlayerReady(event) {
        player.cuePlaylist({
            'listType': 'playlist',
            'playlist': window.song_list, // 再生リストを設定
            'index': 0,
            'startSeconds': 0,
            'suggestedQuality': 'small'
        });
			}
      
      var player_state = 0;
      function onPlayerStateChange(event) {
        // プレーヤの状態が変わったら発火
				console.log(event.data);
				if(event.data == 1){ // 再生
					player_state = 1;
					$("#run").trigger("click");
				}
				if(event.data == 2){ // 停止
					player_state = 2;
					$("#stop").trigger("click");
				}
      }
      function stopVideo() {
        player.stopVideo();
      }


      // timerの実装部分
      var start_time, // 基準となる初めに再生した時間
			    stop_time, // 停止させたときの時間
					running = false,
					timer_id,
					offset_time = window.time // プレイリストの合計時間

			$("#run").click(function(){
				if(running) return false;
				running = true;

				if(stop_time){
						start_time = start_time +(new Date()).getTime() - stop_time;
				} else {
			  	start_time = (new Date()).getTime();
				}
				if(player_state != 1){ // 再生してないなら再生させる
				  	player.playVideo();
				}
				timer();
			});
      function timer(){
				var s = (offset_time -((new Date()).getTime() -start_time) /1000);
				var min = Math.floor(s/60);
				var sec = Math.floor(s%60);
				if(sec < 10){
					sec = "0"+sec
				}
					document.getElementById('num').innerHTML = (
							min + ":" + sec 
							);
				if(s <= 0){
					running = false;
					stop_time = undefined;
					document.getElementById('num').innerHTML = (
							"0:00"
							);
				}
				timer_id = setTimeout(function(){
					timer();
				},100);
			}

      $("#stop").click(function(){
				if(!running) return false;
				running = false;

				clearTimeout(timer_id);
				stop_time = (new Date()).getTime();
				if(player_state != 2){
					player.pauseVideo();
				}
			});
    </script>
